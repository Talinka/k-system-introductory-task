{"version":3,"sources":["types/UserStatus.ts","api/userListApi.ts","slices/usersSlice.ts","components/UserItem.tsx","components/UserList.tsx","components/StatusGroup.tsx","components/modals/ChangeUserStatus.tsx","components/Main.tsx","app/App.tsx","app/rootReducer.ts","app/store.ts","index.tsx"],"names":["UserStatus","a","fetch","response","json","data","Error","usersSlice","createSlice","name","initialState","users","isLoading","error","reducers","getUsersStart","state","getUsersSuccess","payload","getUsersFailure","action","changeUserStatus","selectesUser","user","newStatus","index","findIndex","id","status","actions","fetchUsers","dispatch","getUsers","message","statusIcons","New","Verified","VIP","UserItem","onClick","button","primary","UserList","map","key","statusLabels","StatusGroup","onStatusChange","useState","String","selectedStatus","setStatus","row","aria-label","value","toString","onChange","e","Number","i","control","label","ChangeUserStatus","currentStatus","open","onSubmit","handleSubmit","isSaveChange","onClose","aria-labelledby","color","Main","setOpen","selectedUser","setSelectedUser","useDispatch","length","App","useSelector","useEffect","rootReducer","combineReducers","usersReducer","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27f0946d.chunk.js","sourcesContent":["export enum UserStatus {\n  New,\n  Verified,\n  VIP,\n};\n\nexport default UserStatus;","import User from '../types/User';\n\n// Imitating server request api\n// Here suppose to be data request to remote server or database\nexport default async (): Promise<User[]> => {\n  try {\n    const response = await fetch('/users.json');\n    const data = await response.json();\n    return data;\n  }\n  catch(err) {\n    throw new Error(`Error then loading user list from server. ${err}`);\n  }\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport User from '../types/User';\nimport getUsers from '../api/userListApi';\nimport { AppDispatch } from '../app/store';\nimport UserStatus from '../types/UserStatus';\n\ninterface UsersState {\n  users: User[],\n  isLoading: boolean,\n  error: string | null,\n}\n\nconst usersInitialState: UsersState = {\n  users: [],\n  isLoading: false,\n  error: null\n}\n\nconst startLoading = (state: UsersState) => {\n  state.isLoading = true\n}\n\nconst loadingFailed = (state: UsersState, action: PayloadAction<string>) => {\n  state.isLoading = false;\n  state.error = action.payload;\n}\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: usersInitialState,\n  reducers: {\n    getUsersStart: startLoading,\n    getUsersSuccess(state, { payload }: PayloadAction<User[]>) {\n      const users = payload;\n      state.users = users;\n      state.isLoading = false;\n      state.error = null;\n    },\n    getUsersFailure: loadingFailed,\n    changeUserStatus(state, action: PayloadAction<{ user: User, newStatus: UserStatus}>) {\n      const { user: selectesUser, newStatus } = action.payload;\n      const index = state.users.findIndex((user) => user.id === selectesUser.id);\n      state.users[index].status = newStatus;\n    },\n  }\n})\n\nexport const {\n  getUsersStart,\n  getUsersSuccess,\n  getUsersFailure,\n  changeUserStatus,\n} = usersSlice.actions;\n\nexport default usersSlice.reducer;\n\nexport const fetchUsers = async (dispatch: AppDispatch) => {\n  try {\n    dispatch(getUsersStart());\n    const users = await getUsers();\n    dispatch(getUsersSuccess(users));\n  } catch (err) {\n    dispatch(getUsersFailure(err.message));\n  }\n}","import React from 'react';\nimport UserStatus from '../types/UserStatus';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n// icons\nimport NewUserIcon from '@material-ui/icons/FiberNewOutlined';\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUserOutlined';\nimport VIPUserIcon from '@material-ui/icons/EmojiEventsOutlined';\n// types\nimport User from '../types/User';\n\ntype UserProps = {\n  user: User;\n  onClick: (user: User) => void;\n}\n\nconst statusIcons = {\n  [UserStatus.New]: <NewUserIcon />,\n  [UserStatus.Verified]: <VerifiedUserIcon />,\n  [UserStatus.VIP]: <VIPUserIcon />,\n}\n\nfunction UserItem({ user, onClick }: UserProps) {\n  const { name, status } = user;\n  const clickHandle = () => {\n    onClick(user);\n  }\n\n  return (\n    <ListItem button onClick={clickHandle}>\n      <ListItemIcon>\n        {statusIcons[status]}\n      </ListItemIcon>\n      <ListItemText primary={name} />\n    </ListItem>\n  );\n}\n\nexport default UserItem;","import React from 'react';\nimport List from '@material-ui/core/List';\n// components\nimport UserItem from './UserItem';\n// types\nimport User from '../types/User';\n\ntype UserListProps = {\n  users: Array<User>,\n  onClick: (user: User) => void;\n}\n\nconst UserList = ({ users, onClick }: UserListProps) => {\n  return (\n    <List>\n      {users.map((user) => <UserItem user={user} key={user.id} onClick={onClick}/>)}\n    </List>\n  );\n}\n\nexport default UserList;","import React, { useState } from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n// types\nimport UserStatus from '../types/UserStatus';\n\ntype StatusGroupProps = {\n  status: UserStatus;\n  onStatusChange: (status: UserStatus) => void,\n};\n\nconst statusLabels: Array<string> = [\n  'New',\n  'Verified',\n  'VIP',\n];\n\nconst StatusGroup = ({ status, onStatusChange }: StatusGroupProps) => {\n  const [selectedStatus, setStatus] = useState(String(status));\n\n  const handleChange = (e: React.ChangeEvent<{}>, value: string) => {\n    setStatus(value);\n    onStatusChange(Number(value));\n  };\n\n  return (\n    <FormControl>\n      <RadioGroup row aria-label=\"status\" name=\"status\"\n        value={selectedStatus.toString()}\n        onChange={handleChange}\n      >\n        {statusLabels.map((status, i) => (\n          <FormControlLabel key={i} value={i.toString()} control={<Radio />} label={status} />\n        ))}\n      </RadioGroup>\n    </FormControl>\n  );\n};\n\nexport default StatusGroup;\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n// components\nimport StatusGroup from '../StatusGroup';\n// types\nimport User from '../../types/User';\nimport UserStatus from '../../types/UserStatus';\n\ntype ChangeUserStatusProps = {\n  user: User,\n  open: boolean,\n  currentStatus: UserStatus,\n  onSubmit: (user: User, newStatus: UserStatus, isChanged: boolean) => void,\n};\n\nconst ChangeUserStatus = ({ user, currentStatus, open, onSubmit }: ChangeUserStatusProps) => {\n  let { name } = user;\n  const [selectedStatus, setStatus] = useState(currentStatus);\n\n  const handleSubmit = (isSaveChange: boolean) => () => {\n    onSubmit(user, selectedStatus, isSaveChange);\n  };\n\n  const handleStatusChange = (status: UserStatus) => {\n    setStatus(status);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleSubmit(false)} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\">Change user status</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          {`Select status for user ${name}:`}\n        </DialogContentText>\n        <StatusGroup status={user.status} onStatusChange={handleStatusChange} />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleSubmit(false)} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit(true)} color=\"primary\">\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default ChangeUserStatus;","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n// slices\nimport { changeUserStatus } from '../slices/usersSlice';\n// components\nimport UserList from './UserList';\nimport UserStatus from '../types/UserStatus';\nimport ChangeUserStatusModal from './modals/ChangeUserStatus';\n// types\nimport User from '../types/User';\n\ntype MainProps = {\n  users: Array<User>,\n}\n\nconst Main = ({ users }: MainProps) => {\n  const [open, setOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(users[0]);\n\n  const dispatch = useDispatch();\n\n  const changeStatusSubmit = (user: User, newStatus: UserStatus, isSaveChange: boolean) => {\n    if (isSaveChange) {\n      dispatch(changeUserStatus({ user, newStatus }));\n    }\n    setOpen(false);\n  }\n\n  const handleShowDialog = (user: User) => {\n    setSelectedUser(user);\n    setOpen(true);\n  }\n\n  return (\n    <div>\n      <UserList users={users} onClick={handleShowDialog} />\n      {users.length > 0 &&\n        <ChangeUserStatusModal\n          user={selectedUser}\n          open={open}\n          currentStatus={selectedUser.status}\n          onSubmit={changeStatusSubmit}\n        />}\n    </div>\n  );\n}\n\nexport default Main;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n// components\nimport Main from '../components/Main';\n\nimport { RootState } from './rootReducer';\nimport { fetchUsers } from '../slices/usersSlice';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  const {\n    users,\n    isLoading,\n    error,\n  } = useSelector((state: RootState) => state.users)\n\n  useEffect(() => {\n    dispatch(fetchUsers);\n  },\n    // when we have server api for change user state, we'll need dispatch in dependency list\n    // eslint-disable-next-line\n    []);\n\n  if (error) {\n    return (\n      <div>\n        <h1>Something went wrong...</h1>\n        <div>{error}</div>\n      </div>\n    )\n  }\n\n  const renderLoading = () => (\n    <>\n      <CircularProgress />\n      <div>Loading...</div>\n    </>\n  )\n\n  return (\n    <div>\n      <h2>User list</h2>\n      {isLoading ? renderLoading() : <Main users={users} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport usersReducer from '../slices/usersSlice';\n\nconst rootReducer = combineReducers({\n  users: usersReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer\n});\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\n\nimport { Provider } from 'react-redux'\nimport store from './app/store'\n\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}